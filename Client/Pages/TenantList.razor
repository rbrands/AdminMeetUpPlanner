@page "/tenantlist"
@attribute [Authorize(Roles = Constants.RoleAllAdmins)]
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager



<h1>Clubs</h1>
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage"></BlazorApp.Client.Shared.NotificationMessage>

<div class="table-responsive">
    <AuthorizeView>
        <Authorized>
            @if (null == _tenants)
            {
                <p><em>Mandanten-Daten werden geladen... Beim ersten Aufruf dauert das ein bisschen.</em></p>
            }
            else
            { 
                <table class="table table-sm table-striped table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">Aktion</th>
                            <th scope="col">Name</th>
                            <th scope="col">Kürzel</th>
                            <th scope="col">URL</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (TenantSettings tenant in _tenants)
                        {
                            @if (context.User.IsInRole(Constants.RoleAdmin) || context.User.IsInRole(tenant.AdminRole))
                            {
                                <tr>
                                    <td>
                                        @if (context.User.IsInRole(Constants.RoleAdmin))
                                        {
                                            <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditTenant(tenant.Id))"><span class="oi oi-pencil"></span></button>
                                            <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteTenant(tenant))"><span class="oi oi-trash"></span></button>
                                        }
                                        <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => AdminTenant(tenant.Id))"><span class="oi oi-wrench"></span></button>
                                        <button class="btn btn-sm btn-outline-secondary" title="Export" @onclick="@(() => ExportTrackingReport(tenant.Id))"><span class="oi oi-data-transfer-download"></span></button>
                                    </td>
                                    <td>@tenant.TenantName</td>
                                    <td>@tenant.TenantKey</td>
                                    <td><a href="@tenant.PrimaryUrl" title="@tenant.TenantName" target="_blank">@tenant.PrimaryUrl</a></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private IEnumerable<TenantSettings> _tenants = null;
    private NotificationMessage _notificationMessage;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            AppStateStore.Tenants = _tenants = await Api.GetTenants();
            AppStateStore.TenantsAlreadyRead = true;
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Daten können nicht gelesen werden: {ex.Message}");
        }
    }

    protected void EditTenant(string Id)
    {
        NavigationManager.NavigateTo($"/edittenant/{Id}");
    }
    protected void AdminTenant(string Id)
    {
        NavigationManager.NavigateTo($"/administration/{Id}");
    }
    protected void ExportTrackingReport(string Id)
    {
        NavigationManager.NavigateTo($"/exportcontactreport/{Id}");
    }

    protected async Task DeleteTenant(TenantSettings tenantSettings)
    {
        ModalResult result = await Confirm.ShowDialog(Modal, $"{tenantSettings.TenantName} löschen?", "Sollen die Mandanten-Einstellung wirklich gelöscht werden? Danach kann der Mandant nicht mehr verwendet werden!");
        if (result.Cancelled || !(result.Data is bool accepted) || !accepted)
        {
            return;
        }
        try
        {
            await Api.DeleteTenant(tenantSettings);
            AppStateStore.Tenants = _tenants = await Api.GetTenants();
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler beim Löschen: {ex.Message}");
        }
    }


}
