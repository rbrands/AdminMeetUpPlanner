@page "/administration/{Id}"
@attribute [Authorize(Roles = "admin,tenantadmin")]
@using BlazorApp.Shared
@using BlazorApp.Client.Utils
@using Blazored.TextEditor
@inject AppState AppStateStore
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager
<h1>Administration</h1>
<h4>Client Einstellungen</h4>
<EditForm OnValidSubmit="SaveClientSettings" Model="@_clientSettings">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Titel</label>
        <InputText id="title" aria-describedby="titleHelp" class="form-control" @bind-Value="_clientSettings.Title" autocomplete="on" placeholder="Überschrift zum MeetUp-Planner" title="Überschrift." />
        <small id="titleHelp" class="form-text text-muted">
            Wird als Titel der Anwendung angezeigt statt dem neutralen "MeetUp-Planner".
        </small>
    </div>
    <div class="form-group">
        <label for="link">Link</label>
        <InputText id="link" aria-describedby="linkHelp" class="form-control" @bind-Value="_clientSettings.FurtherInfoLink" autocomplete="on" placeholder="Url zu externer Web-Seite" title="Überschrift." />
        <small id="linkHelp" class="form-text text-muted">
            Hier kann der Link zu einer externen Web-Seite angegeben werden.
        </small>
    </div>
    <div class="form-group">
        <label for="linkTitle">Titel des Links</label>
        <InputText id="linkTitle" aria-describedby="linkTitleHelp" class="form-control" @bind-Value="_clientSettings.FurtherInfoTitle" autocomplete="on" placeholder="Titel zum externen Link" title="Titel zum externen Link." />
        <small id="linkTitleHelp" class="form-text text-muted">
            Hier die "Beschriftung" des externen Links angeben.
        </small>
    </div>
    <div class="form-group">
        <label for="maxGroup">Max. Gruppengröße</label>
        <InputNumber id="maxGroup" aria-describedby="maxGroupHelp" class="form-control" @bind-Value="_clientSettings.MaxGroupSize" autocomplete="on" />
        <small id="maxGroupHelp" class="form-text text-muted">
            Festlegung der maximalen Gruppengröße.
        </small>
    </div>
    <div class="form-group">
        <label for="maxGroupForAdmins">Max. Gruppengröße für Administratoren</label>
        <InputNumber id="maxGroupForAdmins" aria-describedby="maxGroupForAdminsHelp" class="form-control" @bind-Value="_clientSettings.MaxGroupSizeForAdmins" autocomplete="on" />
        <small id="maxGroupForAdminsHelp" class="form-text text-muted">
            Festlegung der maximalen Gruppengröße für Administratoren, die größere Gruppen erlauben dürfen.
        </small>
    </div>
    <div class="form-group">
        <label for="nameDisplayLength">Anzahl Buchstaben Nachname</label>
        <InputNumber id="nameDisplayLength" aria-describedby="nameDisplayLengthHelp" class="form-control" @bind-Value="_clientSettings.NameDisplayLength" autocomplete="on" />
        <small id="nameDisplayLengthHelp" class="form-text text-muted">
            Anzahl Buchstaben, die vom Nachnamen angezeigt werden sollen. 0 für Anzeige des ganzen Namens.
        </small>
    </div>
    <div class="form-group">
        <label for="welcomeMessage">Welcome Nachricht</label>
        <BlazoredTextEditor @ref="@htmlWelcomeMessage" Placeholder="Nachricht für Startseite">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != _clientSettings.WelcomeMessage)
            {@((MarkupString)_clientSettings.WelcomeMessage)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <label for="logoLink">Link zu einem Logo-Bild</label>
        <InputText id="logoLink" aria-describedby="logoLinkHelp" class="form-control" @bind-Value="_clientSettings.LogoLink" />
        <small id="logoLinkHelp" class="form-text text-muted">
            Hier kann der Link zu einem Logo angegeben werden.
        </small>
    </div>
    <div class="form-group">
        <label for="helpLink">Link zur Online-Hilfe</label>
        <InputText id="helpLink" aria-describedby="helpLinkHelp" class="form-control" @bind-Value="_clientSettings.HelpLink" />
        <small id="helpLinkHelp" class="form-text text-muted">
            Hinweise zur Bedienung.
        </small>
    </div>

    <div class="form-group">
        <label for="whiteboardMessage">Whiteboard Nachricht</label>
        <BlazoredTextEditor @ref="@htmlWhiteboardMessage" Placeholder="Nachricht für die Terminseite">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != _clientSettings.WhiteboardMessage)
            {@((MarkupString)_clientSettings.WhiteboardMessage)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <label for="newMeetUpMessage">Nachricht für neue MeetUps</label>
        <BlazoredTextEditor @ref="@htmlNewMeetupMessage" Placeholder="Nachricht für neue Termine">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != _clientSettings.NewMeetupMessage)
            {@((MarkupString)_clientSettings.NewMeetupMessage)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <label for="disclaimerMessage">Disclaimer für Teilnehmer</label>
        <BlazoredTextEditor @ref="@htmlDisclaimer" Placeholder="Disclaimer">
            <ToolbarContent>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != _clientSettings.Disclaimer)
            {@((MarkupString)_clientSettings.Disclaimer)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <label for="guestDisclaimerMessage">Disclaimer für Gast-Teilnehmer</label>
        <BlazoredTextEditor @ref="@htmlGuestDisclaimer" Placeholder="Disclaimer für Gäste">
            <ToolbarContent>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != _clientSettings.GuestDisclaimer)
            {@((MarkupString)_clientSettings.GuestDisclaimer)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="guestsEnabled" class="form-check-input" @bind-Value="_clientSettings.GuestsEnabled" />
            <label for="guestsEnabled" class="form-checklabel">
                Einladen von Gästen möglich?
            </label>
        </div>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="publicJoiningEnabled" class="form-check-input" @bind-Value="_clientSettings.PublicMeetUpJoiningEnabled" />
            <label for="publicJoiningEnabled" class="form-checklabel">
                Sollen die MeetUps öffentlich sichtbar und offen für Teilnehmer ohne Schlüsselwort sein?
            </label>
        </div>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="onlyAdminsAsHost" class="form-check-input" @bind-Value="_clientSettings.OnlyAdminsAsHost" />
            <label for="onlyAdminsAsHost" class="form-checklabel">
                Sollen nur Admins MeetUps anlegen können?
            </label>
        </div>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="appLocked" class="form-check-input" @bind-Value="_clientSettings.AppLocked" />
            <label for="appLocked" class="form-checklabel">
                Soll der Zugang zum MeetUpPlanner mit der Meldung unten gesperrt werden?
            </label>
        </div>
    </div>
    <div class="form-group">
        <label for="lockedMessage">Meldung falls MeetUpPlanner gesperrt</label>
        <BlazoredTextEditor @ref="@htmlLockedMessage" Placeholder="Meldung als Hinweis an die Nutzer, falls der MeetUpPlanner gesperrt wird.">
            <ToolbarContent>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != _clientSettings.LockedMessage)
            {@((MarkupString)_clientSettings.LockedMessage)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="onlyScoped" class="form-check-input" @bind-Value="_clientSettings.OnlyScopedMeetUpsAllowed" />
            <label for="onlyScoped" class="form-checklabel">
                Nur MeetUps an den Tagen zulassen, die mit den "Badges" unten gekennzeichnet sind?
            </label>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="mondayBadge">Die Wochentage können mit "Badges" gekennzeichnet werden.</label>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <InputText id="mondayBadge" placeholder="Montag" class="form-control form-control-sm" @bind-Value="_clientSettings.MondayBadge" title="Badge für Montag" />
        </div>
        <div class="form-group col">
            <InputText id="tuesdayBadge" placeholder="Dienstag" class="form-control form-control-sm" @bind-Value="_clientSettings.TuesdayBadge" title="Badge für Dienstag" />
        </div>
        <div class="form-group col">
            <InputText id="wednsesdayBadge" placeholder="Mittwoch" class="form-control form-control-sm" @bind-Value="_clientSettings.WednesdayBadge" title="Badge für Mittwoch" />
        </div>
        <div class="form-group col">
            <InputText id="thursdayBadge" placeholder="Donnerstag" class="form-control form-control-sm" @bind-Value="_clientSettings.ThursdayBadge" title="Badge für Donnerstag" />
        </div>
        <div class="form-group col">
            <InputText id="fridayBadge" placeholder="Freitag" class="form-control form-control-sm" @bind-Value="_clientSettings.FridayBadge" title="Badge für Freitag" />
        </div>
        <div class="form-group col">
            <InputText id="saturdayBadge" placeholder="Samstag" class="form-control form-control-sm" @bind-Value="_clientSettings.SaturdayBadge" title="Badge für Samstag" />
        </div>
        <div class="form-group col">
            <InputText id="sundayBadge" placeholder="Sonntag" class="form-control form-control-sm" @bind-Value="_clientSettings.SundayBadge" title="Badge für Sonntag" />
        </div>
    </div>
    @if (_tenantSettings.TracksEnabled)
    {
        <div class="form-group">
            <label for="quickTag">Routen-Tag für Schnellauswahl</label>
            <InputText id="quickTag" aria-describedby="quickTagHelp" class="form-control" @bind-Value="_clientSettings.RouteTagForQuickSelection" placeholder="Tag für Schnellauswahl" title="Tag" />
            <small id="quickTagHelp" class="form-text text-muted">
                Tag, das für die Schnellauswahl von Routen verwendet werden soll (oder leer lassen, wenn nicht gewünscht)
            </small>
        </div>
    }
    <div class="form-group">
        <label for="federationClient">Federation</label>
        <InputText id="federationClient" aria-describedby="federationClientHelp" class="form-control" @bind-Value="_clientSettings.Federation" placeholder="Name des federierten Clubs" title="Federation" />
        <small id="federationClientHelp" class="form-text text-muted">
            Bezeichnung des Clubs, mit dem Ausfahrten/Termine geteilt werden können.
        </small>
    </div>
    <button type="submit" id="BtnSaveSettings" class="btn btn-primary">Einstellungen speichern ...</button>
</EditForm>
<BlazorApp.Client.Shared.NotificationMessage @ref="@_notificationMessage" />
<hr />

<h4>Server Einstellungen</h4>
<EditForm OnValidSubmit="SaveServerSettings" Model="@_serverSettings">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="userKeyword">Schlüsselwort</label>
        <InputText id="userKeyword" aria-describedby="userKeywordHelp" class="form-control" @bind-Value="_serverSettings.UserKeyword" autocomplete="on" placeholder="Schlüsselwort für den allgemeinen Zugang" title="Schlüsselwort" />
        <small id="userKeywordHelp" class="form-text text-muted">
            Schlüsselwort für den Zugang zu den Terminen.
        </small>
    </div>
    <div class="form-group">
        <label for="adminKeyword">Admin Schlüsselwort</label>
        <InputText id="adminKeyword" aria-describedby="adminKeywordHelp" class="form-control" @bind-Value="_serverSettings.AdminKeyword" autocomplete="on" placeholder="Schlüsselwort für Admins" title="Admin Schlüsselwort" />
        <small id="adminKeywordHelp" class="form-text text-muted">
            Das Schlüsselwort für Administratoren des MeetUp-Planners.
        </small>
    </div>
    <div class="form-group">
        <label for="webcalToken">Token für Internet-Kalender</label>
        <InputText id="webcalToken" aria-describedby="webcalTokenHelp" class="form-control" @bind-Value="_serverSettings.WebcalToken" autocomplete="on" placeholder="Token für Internet-Kalender" title="Webcal Token" />
        <small id="webcalTokenHelp" class="form-text text-muted">
            Token für den Zugriff auf den Internet-Kalender der Form webcals://meetupplanner.de/api/webcalendar/getmeetups/token.
        </small>
    </div>
    <div class="form-group">
        <label for="autoDelete">Anzahl Tage</label>
        <InputNumber id="autoDelete" aria-describedby="autoDeleteHelp" class="form-control" @bind-Value="_serverSettings.AutoDeleteAfterDays" autocomplete="on" placeholder="Speicherungsdauer in Tagen für Termine" title="Speicherdauer" />
        <small id="autoDeleteHelp" class="form-text text-muted">
            Anzahl Tage, die die Termine gespeichert werden sollen. Danach werden sie automatisch gelöscht.
        </small>
    </div>
    <div class="form-group">
        <label for="displayWindow">Anzeigefenster für Termine in der Vergangenheit</label>
        <InputNumber id="displayWindow" aria-describedby="displayWindowHelp" class="form-control" @bind-Value="_serverSettings.CalendarItemsPastWindowHours" autocomplete="on" />
        <small id="maxGroupHelp" class="form-text text-muted">
            Anzeige von Terminen mit Startzeit die hier festgelegte Anzahl Stunden in der Vergangenheit.
        </small>
    </div>
    <div class="form-group">
        <label for="federationServer">Federation</label>
        <InputText id="federationServer" aria-describedby="federationServerHelp" class="form-control" @bind-Value="_serverSettings.Federation" placeholder="Akzeptierter Name in Federationen" title="Federation" />
        <small id="federationServerHelp" class="form-text text-muted">
            Bezeichnung, mit der Ausfahrten/Termine akzeptiert werden.
        </small>
    </div>
    <button type="submit" id="BtnSaveServerSettings" class="btn btn-primary">Einstellungen speichern ...</button>
</EditForm>


<BlazorApp.Client.Shared.NotificationMessage @ref="@_serverNotificationMessage" />

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    [Parameter]
    public string Id { get; set; }

    private TenantSettings _tenantSettings = new TenantSettings();
    private NotificationMessage _notificationMessage;
    private NotificationMessage _serverNotificationMessage;

    private ServerSettings _serverSettings = new ServerSettings();
    private ClientSettings _clientSettings = new ClientSettings();
    BlazoredTextEditor htmlWelcomeMessage;
    BlazoredTextEditor htmlWhiteboardMessage;
    BlazoredTextEditor htmlNewMeetupMessage;
    BlazoredTextEditor htmlDisclaimer;
    BlazoredTextEditor htmlGuestDisclaimer;
    BlazoredTextEditor htmlLockedMessage;


    protected override async Task OnInitializedAsync()
    {
        if (!AppStateStore.TenantsAlreadyRead)
        {
            try
            {
                AppStateStore.Tenants = await Api.GetTenants();
                AppStateStore.TenantsAlreadyRead = true;
            }
            catch (Exception ex)
            {
                _notificationMessage.ShowError($"Fehler beim Lesen der Daten: {ex.Message}");
            }
        }
        _tenantSettings = AppStateStore.Tenants.FirstOrDefault(t => t.Id.Equals(Id));
        try
        {
            _clientSettings = await Api.GetClientSettings(_tenantSettings.Id);
            _serverSettings = await Api.GetServerSettings(_tenantSettings.Id);
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler beim Lesen der Daten: {ex.Message}");
        }
    }
    private async Task SaveClientSettings()
    {
        _clientSettings.WelcomeMessage = StripEmptyHtml(await htmlWelcomeMessage.GetHTML());
        _clientSettings.WhiteboardMessage = StripEmptyHtml(await htmlWhiteboardMessage.GetHTML());
        _clientSettings.NewMeetupMessage = StripEmptyHtml(await htmlNewMeetupMessage.GetHTML());
        _clientSettings.Disclaimer = StripEmptyHtml(await htmlDisclaimer.GetHTML());
        _clientSettings.GuestDisclaimer = StripEmptyHtml(await htmlGuestDisclaimer.GetHTML());
        _clientSettings.LockedMessage = StripEmptyHtml(await htmlLockedMessage.GetHTML());

        // Write client settings to server
        try
        {
            _clientSettings = await Api.WriteClientSettings(_tenantSettings.Id, _clientSettings);
            _notificationMessage.ShowSuccess("Einstellungen gespeichert.");
        }
        catch (Exception ex)
        {
            _notificationMessage.ShowError($"Fehler beim Speichern: {ex.Message}");
        }
    }
    private async Task SaveServerSettings()
    {
        // Save server settings to server
        try
        {
            _serverSettings = await Api.WriteServerSettings(_tenantSettings.Id, _serverSettings);
            _serverNotificationMessage.ShowSuccess("Einstellungen gespeichert.");
        }
        catch (Exception ex)
        {
            _serverNotificationMessage.ShowError($"Fehler beim Speichern: {ex.Message}");
        }
    }


    private string StripEmptyHtml(string htmlContent)
    {
        return htmlContent.Equals("<p><br></p>") ? null : htmlContent;
    }


}
